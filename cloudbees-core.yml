---
# Source: cloudbees-core/templates/cjoc-configure-jenkins-groovy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cjoc-configure-jenkins-groovy
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
data:
  location.groovy: |
    hudson.ExtensionList.lookupSingleton(com.cloudbees.jenkins.support.impl.cloudbees.TcpSlaveAgentListenerMonitor.class).disable(true)
    jenkins.model.JenkinsLocationConfiguration.get().setUrl("https://demo.cb-sa.io/cjoc");
---
# Source: cloudbees-core/templates/service-account-cjoc.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cjoc
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
---
# Source: cloudbees-core/templates/service-account-master.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
---
# Source: cloudbees-core/templates/role-agents.yaml

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cjoc-agents
  labels:
    app: cjoc
    heritage: "Tiller"
    release: "cloudbees-core"
    chart: "cloudbees-core-3.4.0"
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - cb-restricted
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]

---
# Source: cloudbees-core/templates/role-master-management.yaml

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cjoc-master-management
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - cb-restricted
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get","list","watch"]

---
# Source: cloudbees-core/templates/rolebinding-cjoc.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cjoc-role-binding
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cjoc-master-management
subjects:
- kind: ServiceAccount
  name: cjoc
  
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: core-bot
  namespace: core-demo
  
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cbot
rules:
- apiGroups: ['extensions']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - cb-restricted
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["roles"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["rolebindings"]
  verbs: ["create","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get","list","watch"]
---
# Source: cloudbees-core/templates/rolebinding-master.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cbot-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cbot
subjects:
- kind: ServiceAccount
  name: core-bot
  namespace: core-demo
---
# Source: cloudbees-core/templates/rolebinding-master.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cjoc-master-role-binding
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cjoc-agents
subjects:
- kind: ServiceAccount
  name: jenkins
- kind: ServiceAccount
  name: core-bot
---
# Source: cloudbees-core/templates/cjoc-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: cjoc
  labels:
    app: cjoc
    heritage: "Tiller"
    release: "cloudbees-core"
    chart: "cloudbees-core-3.4.0"
    component: "cloudbees-core-jenkins-master"
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: jnlp
      port: 50000
      targetPort: 50000
      protocol: TCP
  selector:
    component: "cloudbees-core-jenkins-master"
    com.cloudbees.cje.tenant: cjoc
  type: ClusterIP

---
# Source: cloudbees-core/templates/cjoc-ingress.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: cjoc
  labels:
    app: cjoc
    chart: "cloudbees-core-3.4.0"
    release: "cloudbees-core"
    heritage: "Tiller"
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "false"
    nginx.ingress.kubernetes.io/app-root: "/cjoc"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # "413 Request Entity Too Large" uploading plugins, increase client_max_body_size
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    certmanager.k8s.io/issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: http01
spec:
  tls:
  - hosts:
    - demo.cb-sa.io
    secretName: cjoc-tls
  rules:
  - host: "demo.cb-sa.io"
    http:
      paths:
      - path: /cjoc
        backend:
          serviceName: cjoc
          servicePort: 80

---
# Source: cloudbees-core/templates/cjoc-statefulset.yaml
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: cjoc
  labels:
    com.cloudbees.cje.type: cjoc
    com.cloudbees.cje.tenant: cjoc
    heritage: "Tiller"
    release: "cloudbees-core"
    component: "cloudbees-core-cjoc"
spec:
  selector:
    matchLabels:
      com.cloudbees.cje.type: cjoc
      com.cloudbees.cje.tenant: cjoc
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  serviceName: cjoc
  template:
    metadata:
      name: cjoc
      labels:
        com.cloudbees.cje.type: cjoc
        com.cloudbees.cje.tenant: cjoc
        app: cjoc
        heritage: "Tiller"
        release: "cloudbees-core"
        component: "cloudbees-core-jenkins-master"
    spec:
      serviceAccountName: cjoc
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 10
      containers:
        - name: jenkins
          image: gcr.io/technologists/cb-core-oc-workshop:2176.3.47
          imagePullPolicy: "Always"
          env:
            - name: ENVIRONMENT
              value: KUBERNETES
            - name: JENKINS_OPTS
              value: "--prefix=/cjoc "
            - name: JAVA_OPTS
              # To allocate masters using a non-default storage class, add the following
              # -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.storageClassName=some-storage-class
              value: >-
                -XshowSettings:vm
                -XX:MaxRAMFraction=1
                -XX:+UnlockExperimentalVMOptions
                -XX:+UseCGroupMemoryLimitForHeap
                -Dcb.IMProp.warProfiles.cje=kubernetes.json
                -Dcom.cloudbees.opscenter.analytics.reporter.JocAnalyticsReporter.PERIOD=120
                -Dcom.cloudbees.opscenter.analytics.reporter.metrics.AperiodicMetricSubmitter.PERIOD=120
                -Dcom.cloudbees.opscenter.analytics.FeederConfiguration.PERIOD=120
                -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.fsGroup=1000
                -Dhudson.lifecycle=hudson.lifecycle.ExitLifecycle
                -Dcom.cloudbees.jce.masterprovisioning.DockerImageDefinitionConfiguration.disableAutoConfiguration=true
                -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.serviceAccount=jenkins
                -Dcom.cloudbees.masterprovisioning.kubernetes.KubernetesMasterProvisioning.storageClassName=ssd
                -Dcom.cloudbees.opscenter.clouds.kubernetes.KubernetesConfiguration.autoconfigure=false:
            # With the help of SECRETS environment variable
            # we point Jenkins Configuration as Code plugin the location of the secrets
            - name: SECRETS
              value: /var/jenkins_home/oc-jcasc-secrets
            - name: CASC_JENKINS_CONFIG
              value: https://raw.githubusercontent.com/kypseli/demo-oc-casc/master/jcasc.yml
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 50000
          resources:
            limits:
              cpu: "2"
              memory: "6G"
            requests:
              cpu: "2"
              memory: "4G"
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
              readOnly: false
            - name: jenkins-configure-jenkins-groovy
              mountPath: /var/jenkins_config/configure-jenkins.groovy.d
              readOnly: true
            - name: oc-jcasc-secrets
              mountPath: /var/jenkins_home/oc-jcasc-secrets
              readOnly: true
          livenessProbe:
            httpGet:
              path: /cjoc/login
              port: 8080
            initialDelaySeconds: 300
            timeoutSeconds: 5
            failureThreshold: 12
      volumes:
      - name: jenkins-configure-jenkins-groovy
        configMap:
          name: cjoc-configure-jenkins-groovy:
      - name: oc-jcasc-secrets
        secret:
          secretName: oc-jcasc-secrets
  volumeClaimTemplates:
    - metadata:
        name: jenkins-home
        labels:
          app: cjoc
          release: "cloudbees-core"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp-restricted-clusterrole
rules:
- apiGroups:
  - extensions
  resources:
  - podsecuritypolicies
  resourceNames:
  - cb-restricted
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cb-core-psp-restricted
  namespace: core-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp-restricted-clusterrole
subjects:
# All service accounts in ingress-nginx namespace
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: kmadel@cloudbees.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    http01: {}


